/* tslint:disable */
/* eslint-disable */
/**
 * EmaoPay API
 * EmaoPay API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@emaopay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EmaopayCreateMerchantParams,
  EmaopayCreateMonitorParams,
  EmaopayCreateNewMonitorParams,
  EmaopayCreateOrderParams,
  EmaopayCreateQrCodeParams,
  EmaopayDeleteQrCodeParams,
  EmaopayLoginParams,
  EmaopayLoginResponse,
  EmaopayMerchant,
  EmaopayMonitor,
  EmaopayMonitorMessageParams,
  EmaopayOrder,
  EmaopayPagedResponseEmaopayMonitorMessage,
  EmaopayPagedResponseEmaopayOrder,
  EmaopayPagedResponseEmaopayQrCode,
  EmaopayQrCode,
  EmaopayRegisterParams,
  EmaopayUploadCredits,
  EmaopayUser,
} from '../models/index';
import {
    EmaopayCreateMerchantParamsFromJSON,
    EmaopayCreateMerchantParamsToJSON,
    EmaopayCreateMonitorParamsFromJSON,
    EmaopayCreateMonitorParamsToJSON,
    EmaopayCreateNewMonitorParamsFromJSON,
    EmaopayCreateNewMonitorParamsToJSON,
    EmaopayCreateOrderParamsFromJSON,
    EmaopayCreateOrderParamsToJSON,
    EmaopayCreateQrCodeParamsFromJSON,
    EmaopayCreateQrCodeParamsToJSON,
    EmaopayDeleteQrCodeParamsFromJSON,
    EmaopayDeleteQrCodeParamsToJSON,
    EmaopayLoginParamsFromJSON,
    EmaopayLoginParamsToJSON,
    EmaopayLoginResponseFromJSON,
    EmaopayLoginResponseToJSON,
    EmaopayMerchantFromJSON,
    EmaopayMerchantToJSON,
    EmaopayMonitorFromJSON,
    EmaopayMonitorToJSON,
    EmaopayMonitorMessageParamsFromJSON,
    EmaopayMonitorMessageParamsToJSON,
    EmaopayOrderFromJSON,
    EmaopayOrderToJSON,
    EmaopayPagedResponseEmaopayMonitorMessageFromJSON,
    EmaopayPagedResponseEmaopayMonitorMessageToJSON,
    EmaopayPagedResponseEmaopayOrderFromJSON,
    EmaopayPagedResponseEmaopayOrderToJSON,
    EmaopayPagedResponseEmaopayQrCodeFromJSON,
    EmaopayPagedResponseEmaopayQrCodeToJSON,
    EmaopayQrCodeFromJSON,
    EmaopayQrCodeToJSON,
    EmaopayRegisterParamsFromJSON,
    EmaopayRegisterParamsToJSON,
    EmaopayUploadCreditsFromJSON,
    EmaopayUploadCreditsToJSON,
    EmaopayUserFromJSON,
    EmaopayUserToJSON,
} from '../models/index';

export interface CheckServiceStatusRequest {
    xMonitorId: string;
    xToken: string;
}

export interface CreateMerchantRequest {
    merchant: EmaopayCreateMerchantParams;
}

export interface CreateMonitorRequest {
    monitor: EmaopayCreateMonitorParams;
}

export interface CreateNewMonitorRequest {
    monitor: EmaopayCreateNewMonitorParams;
}

export interface CreateOrderRequest {
    params: EmaopayCreateOrderParams;
}

export interface CreateQrCodeRequest {
    qrCode: EmaopayCreateQrCodeParams;
}

export interface DeleteMonitorByIdRequest {
    id: string;
}

export interface DeleteQrCodeByIdRequest {
    qrCode: EmaopayDeleteQrCodeParams;
}

export interface FinishedOrderByIdRequest {
    id: string;
}

export interface GetMerchantByIdRequest {
    id: string;
}

export interface GetMonitorByIdRequest {
    id: string;
}

export interface GetMonitorListByMerchantIdRequest {
    merchantId: string;
}

export interface GetMonitorMessageListByMerchantIdRequest {
    merchantId: string;
    pageIndex: number;
    pageSize: number;
}

export interface GetMonitorMessageListByMonitorIdRequest {
    monitorId: string;
    pageIndex: number;
    pageSize: number;
}

export interface GetOrderByIdRequest {
    id: string;
}

export interface GetPagedOrderListRequest {
    status: string;
    merchantId: string;
    productId: string;
    searchKey: string;
    pageIndex: number;
    pageSize: number;
}

export interface GetPaymentProvidersRequest {
    merchantId: string;
}

export interface GetQrCodePagedListByMonitorIdRequest {
    monitorId: string;
    pageIndex?: number;
    pageSize?: number;
}

export interface GetQrCodeUploadCreditsRequest {
    merchantId: string;
}

export interface LoginRequest {
    params: EmaopayLoginParams;
}

export interface NotifyOrderByIdRequest {
    id: string;
}

export interface PushMessageRequest {
    xMonitorId: string;
    xToken: string;
    monitorMessage: EmaopayMonitorMessageParams;
}

export interface RefreshMonitorApiTokenRequest {
    monitorId: string;
}

export interface RegisterRequest {
    params: EmaopayRegisterParams;
}

export interface UpdateMerchantRequest {
    id: string;
    merchant: EmaopayCreateMerchantParams;
}

export interface UpdateMonitorRequest {
    id: string;
    monitor: EmaopayCreateMonitorParams;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * 检查服务状态
     * 检查服务状态
     */
    async checkServiceStatusRaw(requestParameters: CheckServiceStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['xMonitorId'] == null) {
            throw new runtime.RequiredError(
                'xMonitorId',
                'Required parameter "xMonitorId" was null or undefined when calling checkServiceStatus().'
            );
        }

        if (requestParameters['xToken'] == null) {
            throw new runtime.RequiredError(
                'xToken',
                'Required parameter "xToken" was null or undefined when calling checkServiceStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xMonitorId'] != null) {
            headerParameters['X-Monitor-Id'] = String(requestParameters['xMonitorId']);
        }

        if (requestParameters['xToken'] != null) {
            headerParameters['X-Token'] = String(requestParameters['xToken']);
        }

        const response = await this.request({
            path: `/api/monitors/messages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 检查服务状态
     * 检查服务状态
     */
    async checkServiceStatus(requestParameters: CheckServiceStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.checkServiceStatusRaw(requestParameters, initOverrides);
    }

    /**
     * 创建商户
     * 创建商户
     */
    async createMerchantRaw(requestParameters: CreateMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayMerchant>> {
        if (requestParameters['merchant'] == null) {
            throw new runtime.RequiredError(
                'merchant',
                'Required parameter "merchant" was null or undefined when calling createMerchant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/merchants`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmaopayCreateMerchantParamsToJSON(requestParameters['merchant']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayMerchantFromJSON(jsonValue));
    }

    /**
     * 创建商户
     * 创建商户
     */
    async createMerchant(requestParameters: CreateMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayMerchant> {
        const response = await this.createMerchantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建监控
     * 创建监控
     */
    async createMonitorRaw(requestParameters: CreateMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayMonitor>> {
        if (requestParameters['monitor'] == null) {
            throw new runtime.RequiredError(
                'monitor',
                'Required parameter "monitor" was null or undefined when calling createMonitor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/monitors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmaopayCreateMonitorParamsToJSON(requestParameters['monitor']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayMonitorFromJSON(jsonValue));
    }

    /**
     * 创建监控
     * 创建监控
     */
    async createMonitor(requestParameters: CreateMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayMonitor> {
        const response = await this.createMonitorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建新商户
     * 创建新商户
     */
    async createNewMerchantRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayMerchant>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/merchants/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayMerchantFromJSON(jsonValue));
    }

    /**
     * 创建新商户
     * 创建新商户
     */
    async createNewMerchant(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayMerchant> {
        const response = await this.createNewMerchantRaw(initOverrides);
        return await response.value();
    }

    /**
     * 创建新监控
     * 创建新监控
     */
    async createNewMonitorRaw(requestParameters: CreateNewMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayMonitor>> {
        if (requestParameters['monitor'] == null) {
            throw new runtime.RequiredError(
                'monitor',
                'Required parameter "monitor" was null or undefined when calling createNewMonitor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/monitors/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmaopayCreateNewMonitorParamsToJSON(requestParameters['monitor']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayMonitorFromJSON(jsonValue));
    }

    /**
     * 创建新监控
     * 创建新监控
     */
    async createNewMonitor(requestParameters: CreateNewMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayMonitor> {
        const response = await this.createNewMonitorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建订单
     * 创建订单
     */
    async createOrderRaw(requestParameters: CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayOrder>> {
        if (requestParameters['params'] == null) {
            throw new runtime.RequiredError(
                'params',
                'Required parameter "params" was null or undefined when calling createOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/orders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmaopayCreateOrderParamsToJSON(requestParameters['params']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayOrderFromJSON(jsonValue));
    }

    /**
     * 创建订单
     * 创建订单
     */
    async createOrder(requestParameters: CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayOrder> {
        const response = await this.createOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建二维码
     * 创建二维码
     */
    async createQrCodeRaw(requestParameters: CreateQrCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayQrCode>> {
        if (requestParameters['qrCode'] == null) {
            throw new runtime.RequiredError(
                'qrCode',
                'Required parameter "qrCode" was null or undefined when calling createQrCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/qrcodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmaopayCreateQrCodeParamsToJSON(requestParameters['qrCode']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayQrCodeFromJSON(jsonValue));
    }

    /**
     * 创建二维码
     * 创建二维码
     */
    async createQrCode(requestParameters: CreateQrCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayQrCode> {
        const response = await this.createQrCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 删除监控
     * 删除监控
     */
    async deleteMonitorByIdRaw(requestParameters: DeleteMonitorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMonitorById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/monitors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 删除监控
     * 删除监控
     */
    async deleteMonitorById(requestParameters: DeleteMonitorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMonitorByIdRaw(requestParameters, initOverrides);
    }

    /**
     * 删除二维码
     * 删除二维码
     */
    async deleteQrCodeByIdRaw(requestParameters: DeleteQrCodeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['qrCode'] == null) {
            throw new runtime.RequiredError(
                'qrCode',
                'Required parameter "qrCode" was null or undefined when calling deleteQrCodeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/qrcodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: EmaopayDeleteQrCodeParamsToJSON(requestParameters['qrCode']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 删除二维码
     * 删除二维码
     */
    async deleteQrCodeById(requestParameters: DeleteQrCodeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteQrCodeByIdRaw(requestParameters, initOverrides);
    }

    /**
     * 手动完成订单
     * 手动完成订单
     */
    async finishedOrderByIdRaw(requestParameters: FinishedOrderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayOrder>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling finishedOrderById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/orders/finish/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayOrderFromJSON(jsonValue));
    }

    /**
     * 手动完成订单
     * 手动完成订单
     */
    async finishedOrderById(requestParameters: FinishedOrderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayOrder> {
        const response = await this.finishedOrderByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取商户信息
     * 获取商户信息
     */
    async getMerchantByIdRaw(requestParameters: GetMerchantByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayMerchant>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMerchantById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/merchants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayMerchantFromJSON(jsonValue));
    }

    /**
     * 获取商户信息
     * 获取商户信息
     */
    async getMerchantById(requestParameters: GetMerchantByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayMerchant> {
        const response = await this.getMerchantByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取商户列表
     * 获取商户列表
     */
    async getMerchantListByUserIdRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EmaopayMerchant>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/merchants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmaopayMerchantFromJSON));
    }

    /**
     * 获取商户列表
     * 获取商户列表
     */
    async getMerchantListByUserId(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EmaopayMerchant>> {
        const response = await this.getMerchantListByUserIdRaw(initOverrides);
        return await response.value();
    }

    /**
     * 获取监控
     * 获取监控
     */
    async getMonitorByIdRaw(requestParameters: GetMonitorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayMonitor>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMonitorById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/monitors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayMonitorFromJSON(jsonValue));
    }

    /**
     * 获取监控
     * 获取监控
     */
    async getMonitorById(requestParameters: GetMonitorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayMonitor> {
        const response = await this.getMonitorByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取监控列表
     * 获取监控列表
     */
    async getMonitorListByMerchantIdRaw(requestParameters: GetMonitorListByMerchantIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EmaopayMonitor>>> {
        if (requestParameters['merchantId'] == null) {
            throw new runtime.RequiredError(
                'merchantId',
                'Required parameter "merchantId" was null or undefined when calling getMonitorListByMerchantId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['merchantId'] != null) {
            queryParameters['merchantId'] = requestParameters['merchantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/monitors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmaopayMonitorFromJSON));
    }

    /**
     * 获取监控列表
     * 获取监控列表
     */
    async getMonitorListByMerchantId(requestParameters: GetMonitorListByMerchantIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EmaopayMonitor>> {
        const response = await this.getMonitorListByMerchantIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取监控消息列表（商户ID）
     * 获取监控消息列表（商户ID）
     */
    async getMonitorMessageListByMerchantIdRaw(requestParameters: GetMonitorMessageListByMerchantIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayPagedResponseEmaopayMonitorMessage>> {
        if (requestParameters['merchantId'] == null) {
            throw new runtime.RequiredError(
                'merchantId',
                'Required parameter "merchantId" was null or undefined when calling getMonitorMessageListByMerchantId().'
            );
        }

        if (requestParameters['pageIndex'] == null) {
            throw new runtime.RequiredError(
                'pageIndex',
                'Required parameter "pageIndex" was null or undefined when calling getMonitorMessageListByMerchantId().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling getMonitorMessageListByMerchantId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/merchants/:merchantId/messages`.replace(`{${"merchantId"}}`, encodeURIComponent(String(requestParameters['merchantId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayPagedResponseEmaopayMonitorMessageFromJSON(jsonValue));
    }

    /**
     * 获取监控消息列表（商户ID）
     * 获取监控消息列表（商户ID）
     */
    async getMonitorMessageListByMerchantId(requestParameters: GetMonitorMessageListByMerchantIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayPagedResponseEmaopayMonitorMessage> {
        const response = await this.getMonitorMessageListByMerchantIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取监控消息列表（商户监控）
     * 获取监控消息列表（商户监控）
     */
    async getMonitorMessageListByMonitorIdRaw(requestParameters: GetMonitorMessageListByMonitorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayPagedResponseEmaopayMonitorMessage>> {
        if (requestParameters['monitorId'] == null) {
            throw new runtime.RequiredError(
                'monitorId',
                'Required parameter "monitorId" was null or undefined when calling getMonitorMessageListByMonitorId().'
            );
        }

        if (requestParameters['pageIndex'] == null) {
            throw new runtime.RequiredError(
                'pageIndex',
                'Required parameter "pageIndex" was null or undefined when calling getMonitorMessageListByMonitorId().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling getMonitorMessageListByMonitorId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/monitors/:monitorId/messages`.replace(`{${"monitorId"}}`, encodeURIComponent(String(requestParameters['monitorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayPagedResponseEmaopayMonitorMessageFromJSON(jsonValue));
    }

    /**
     * 获取监控消息列表（商户监控）
     * 获取监控消息列表（商户监控）
     */
    async getMonitorMessageListByMonitorId(requestParameters: GetMonitorMessageListByMonitorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayPagedResponseEmaopayMonitorMessage> {
        const response = await this.getMonitorMessageListByMonitorIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取订单信息
     * 获取订单信息
     */
    async getOrderByIdRaw(requestParameters: GetOrderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayOrder>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOrderById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/orders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayOrderFromJSON(jsonValue));
    }

    /**
     * 获取订单信息
     * 获取订单信息
     */
    async getOrderById(requestParameters: GetOrderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayOrder> {
        const response = await this.getOrderByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取订单列表
     * 获取订单列表
     */
    async getOrderListByUserIdRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EmaopayOrder>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/orders/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmaopayOrderFromJSON));
    }

    /**
     * 获取订单列表
     * 获取订单列表
     */
    async getOrderListByUserId(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EmaopayOrder>> {
        const response = await this.getOrderListByUserIdRaw(initOverrides);
        return await response.value();
    }

    /**
     * 获取订单列表
     * 获取订单列表
     */
    async getPagedOrderListRaw(requestParameters: GetPagedOrderListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EmaopayPagedResponseEmaopayOrder>>> {
        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling getPagedOrderList().'
            );
        }

        if (requestParameters['merchantId'] == null) {
            throw new runtime.RequiredError(
                'merchantId',
                'Required parameter "merchantId" was null or undefined when calling getPagedOrderList().'
            );
        }

        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling getPagedOrderList().'
            );
        }

        if (requestParameters['searchKey'] == null) {
            throw new runtime.RequiredError(
                'searchKey',
                'Required parameter "searchKey" was null or undefined when calling getPagedOrderList().'
            );
        }

        if (requestParameters['pageIndex'] == null) {
            throw new runtime.RequiredError(
                'pageIndex',
                'Required parameter "pageIndex" was null or undefined when calling getPagedOrderList().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling getPagedOrderList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/orders`.replace(`{${"status"}}`, encodeURIComponent(String(requestParameters['status']))).replace(`{${"merchantId"}}`, encodeURIComponent(String(requestParameters['merchantId']))).replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))).replace(`{${"searchKey"}}`, encodeURIComponent(String(requestParameters['searchKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmaopayPagedResponseEmaopayOrderFromJSON));
    }

    /**
     * 获取订单列表
     * 获取订单列表
     */
    async getPagedOrderList(requestParameters: GetPagedOrderListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EmaopayPagedResponseEmaopayOrder>> {
        const response = await this.getPagedOrderListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取支付方式
     * 获取支付方式
     */
    async getPaymentProvidersRaw(requestParameters: GetPaymentProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['merchantId'] == null) {
            throw new runtime.RequiredError(
                'merchantId',
                'Required parameter "merchantId" was null or undefined when calling getPaymentProviders().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['merchantId'] != null) {
            queryParameters['merchantId'] = requestParameters['merchantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/orders/payment-providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 获取支付方式
     * 获取支付方式
     */
    async getPaymentProviders(requestParameters: GetPaymentProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getPaymentProvidersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取二维码列表
     * 获取二维码列表
     */
    async getQrCodePagedListByMonitorIdRaw(requestParameters: GetQrCodePagedListByMonitorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayPagedResponseEmaopayQrCode>> {
        if (requestParameters['monitorId'] == null) {
            throw new runtime.RequiredError(
                'monitorId',
                'Required parameter "monitorId" was null or undefined when calling getQrCodePagedListByMonitorId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['monitorId'] != null) {
            queryParameters['monitorId'] = requestParameters['monitorId'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/qrcodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayPagedResponseEmaopayQrCodeFromJSON(jsonValue));
    }

    /**
     * 获取二维码列表
     * 获取二维码列表
     */
    async getQrCodePagedListByMonitorId(requestParameters: GetQrCodePagedListByMonitorIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayPagedResponseEmaopayQrCode> {
        const response = await this.getQrCodePagedListByMonitorIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取二维码上传凭证
     * 获取二维码上传凭证
     */
    async getQrCodeUploadCreditsRaw(requestParameters: GetQrCodeUploadCreditsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayUploadCredits>> {
        if (requestParameters['merchantId'] == null) {
            throw new runtime.RequiredError(
                'merchantId',
                'Required parameter "merchantId" was null or undefined when calling getQrCodeUploadCredits().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['merchantId'] != null) {
            queryParameters['merchantId'] = requestParameters['merchantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/qrcodes/upload-credits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayUploadCreditsFromJSON(jsonValue));
    }

    /**
     * 获取二维码上传凭证
     * 获取二维码上传凭证
     */
    async getQrCodeUploadCredits(requestParameters: GetQrCodeUploadCreditsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayUploadCredits> {
        const response = await this.getQrCodeUploadCreditsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取用户信息
     * 获取用户信息
     */
    async getUserInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayUser>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayUserFromJSON(jsonValue));
    }

    /**
     * 获取用户信息
     * 获取用户信息
     */
    async getUserInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayUser> {
        const response = await this.getUserInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * 登录
     * 登录
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayLoginResponse>> {
        if (requestParameters['params'] == null) {
            throw new runtime.RequiredError(
                'params',
                'Required parameter "params" was null or undefined when calling login().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmaopayLoginParamsToJSON(requestParameters['params']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayLoginResponseFromJSON(jsonValue));
    }

    /**
     * 登录
     * 登录
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayLoginResponse> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 通知订单回调
     * 通知订单回调
     */
    async notifyOrderByIdRaw(requestParameters: NotifyOrderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayOrder>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling notifyOrderById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/orders/notify/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayOrderFromJSON(jsonValue));
    }

    /**
     * 通知订单回调
     * 通知订单回调
     */
    async notifyOrderById(requestParameters: NotifyOrderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayOrder> {
        const response = await this.notifyOrderByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 推送消息
     * 推送消息
     */
    async pushMessageRaw(requestParameters: PushMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['xMonitorId'] == null) {
            throw new runtime.RequiredError(
                'xMonitorId',
                'Required parameter "xMonitorId" was null or undefined when calling pushMessage().'
            );
        }

        if (requestParameters['xToken'] == null) {
            throw new runtime.RequiredError(
                'xToken',
                'Required parameter "xToken" was null or undefined when calling pushMessage().'
            );
        }

        if (requestParameters['monitorMessage'] == null) {
            throw new runtime.RequiredError(
                'monitorMessage',
                'Required parameter "monitorMessage" was null or undefined when calling pushMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xMonitorId'] != null) {
            headerParameters['X-Monitor-Id'] = String(requestParameters['xMonitorId']);
        }

        if (requestParameters['xToken'] != null) {
            headerParameters['X-Token'] = String(requestParameters['xToken']);
        }

        const response = await this.request({
            path: `/api/monitors/messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmaopayMonitorMessageParamsToJSON(requestParameters['monitorMessage']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 推送消息
     * 推送消息
     */
    async pushMessage(requestParameters: PushMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pushMessageRaw(requestParameters, initOverrides);
    }

    /**
     * 刷新ApiToken
     * 刷新ApiToken
     */
    async refreshMonitorApiTokenRaw(requestParameters: RefreshMonitorApiTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['monitorId'] == null) {
            throw new runtime.RequiredError(
                'monitorId',
                'Required parameter "monitorId" was null or undefined when calling refreshMonitorApiToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/monitors/{monitorId}/refresh-api-token`.replace(`{${"monitorId"}}`, encodeURIComponent(String(requestParameters['monitorId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 刷新ApiToken
     * 刷新ApiToken
     */
    async refreshMonitorApiToken(requestParameters: RefreshMonitorApiTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.refreshMonitorApiTokenRaw(requestParameters, initOverrides);
    }

    /**
     * 注册
     * 注册
     */
    async registerRaw(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['params'] == null) {
            throw new runtime.RequiredError(
                'params',
                'Required parameter "params" was null or undefined when calling register().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmaopayRegisterParamsToJSON(requestParameters['params']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 注册
     * 注册
     */
    async register(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registerRaw(requestParameters, initOverrides);
    }

    /**
     * 更新商户
     * 更新商户
     */
    async updateMerchantRaw(requestParameters: UpdateMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayMerchant>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateMerchant().'
            );
        }

        if (requestParameters['merchant'] == null) {
            throw new runtime.RequiredError(
                'merchant',
                'Required parameter "merchant" was null or undefined when calling updateMerchant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/merchants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmaopayCreateMerchantParamsToJSON(requestParameters['merchant']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayMerchantFromJSON(jsonValue));
    }

    /**
     * 更新商户
     * 更新商户
     */
    async updateMerchant(requestParameters: UpdateMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayMerchant> {
        const response = await this.updateMerchantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新监控
     * 更新监控
     */
    async updateMonitorRaw(requestParameters: UpdateMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayMonitor>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateMonitor().'
            );
        }

        if (requestParameters['monitor'] == null) {
            throw new runtime.RequiredError(
                'monitor',
                'Required parameter "monitor" was null or undefined when calling updateMonitor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/monitors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmaopayCreateMonitorParamsToJSON(requestParameters['monitor']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayMonitorFromJSON(jsonValue));
    }

    /**
     * 更新监控
     * 更新监控
     */
    async updateMonitor(requestParameters: UpdateMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayMonitor> {
        const response = await this.updateMonitorRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
